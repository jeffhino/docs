# https://docs.base.org/base-account/llms.txt

## Base Account Documentation

This file contains structured documentation for AI assistants about Base Account. Base Account is a multi-chain self-custodial cryptocurrency wallet that enables users to create an account in seconds with no app or extension required, thanks to its reliance on Passkeys.

Please refer to https://docs.base.org/llms-full.txt for the complete Base documentation.

# Quick Start 
You can try Base Account today on [any supported chain](./overview/what-is-base-account#supported-networks)! Checkout our guides:
- [Quick Demo using OnchainKit (5 mins)](./quickstart/quick-demo)
- [Add to Existing Next.js Project (15 mins)](./quickstart/web)
- [Add to Existing React Native Project](./quickstart/mobile-integration)

Reach out to us in the `#base-account` channel on [Discord](https://discord.com/invite/buildonbase) if you have any questions.

# What is Base Account?

Base Account is a Smart-Wallet-backed account that gives every user:

* **Universal sign-on** â€“ one passkey works across every Base-enabled app.
* **One-tap payments** â€“ low-friction USDC payments built into the account layer.
* **Private profile vault** â€“ opt-in sharing of email, phone, shipping address, and more.
* **Multi-chain support** â€“ one address that works across nine EVM networks (and counting).

Under the hood, each Base Account is an ERC-4337 Smart Wallet that can be deployed on any EVM-compatible chain; nine EVM mainnet chains are enabled out of the box, including Base Mainnet.

# Recommended Libraries

| Library | Description |
|---------|-------------|
| [OnchainKit](https://onchainkit.xyz/) | Ready made React components for wallet connection, transacting, and more. |
| [Wagmi](https://wagmi.sh/) | React and Vite tools that provides hooks for wallet connection, contract interaction, and more.|
| [Viem](https://viem.sh/) | TypeScript Interface for Ethereum that provides low-level primitives and wallet client abstractions. |

## Wallet Aggregators
[Dynamic](https://docs.dynamic.xyz/wallets/advanced-wallets/coinbase-smart-wallet)
[Privy](https://docs.privy.io/guide/react/recipes/misc/coinbase-smart-wallets)
[ThirdWeb](http://portal.thirdweb.com/connect)
[ConnectKit](https://docs.family.co/connectkit)
[Web3Modal](https://docs.reown.com/web3modal/react/smart-accounts)
[Web3-Onboard](https://www.blocknative.com/coinbase-wallet-integration)
[RainbowKit](https://www.rainbowkit.com/)

# Base Gasless Campaign

Base is offering gas credits to help developers make the most of Base Account's [paymaster (sponsored transactions)](/base-account/improve-ux/sponsor-gas/paymasters) features. 

| Partner Tier | Base Gas Credit Incentive | Requirements | Actions |
|--------------|---------------------------|--------------|----------|
| 1            | $15k                      | <ul><li>- Support Base Account</li><li>- Onboard to Coinbase Paymaster</li><li>- Preferred placement in your UI (ie "Sign in with Base" button)</li></ul>      | <ol><li>1. Integrate Base Account SDK into your app, or bump to latest version of any [supporting wallet library](/base-account/framework-integrations/nextjs-with-wagmi).</li><li>2. Sign in / up for [Coinbase Developer Platform](https://www.coinbase.com/developer-platform) (takes less than 2 minutes). No KYC needed - just email and phone.</li><li>3. Check out the Paymaster product where the Base Mainnet Paymaster is enabled by default. Set and change your gas policy at any time.</li><li>4. Complete [this form](https://docs.google.com/forms/d/1yPnBFW0bVUNLUN_w3ctCqYM9sjdIQO3Typ53KXlsS5g/viewform?edit_requested=true)</li><li>Credits will land within 1 week of completion</li></ol>  |
| 2            | $10k                      | <ul><li>- Support Base Account</li><li>- Onboard to Coinbase Paymaster</li></ul>  | <ol><li>1. Integrate Base Account SDK into your app, or bump to latest version of any [supporting wallet library](/base-account/framework-integrations/nextjs-with-wagmi).</li><li>2. Sign in / up for [Coinbase Developer Platform](https://www.coinbase.com/developer-platform) (takes less than 2 minutes). No KYC needed - just email and phone.</li><li>3. Check out the Paymaster product where the Base Mainnet Paymaster is enabled by default. Set and change your gas policy at any time.</li><li>4. Complete [this form](https://docs.google.com/forms/d/1yPnBFW0bVUNLUN_w3ctCqYM9sjdIQO3Typ53KXlsS5g/viewform?edit_requested=true)</li><li>Credits will land within 1 week of completion</li></ol>    |
| Bonus        | $1k                       | <ul><li>- Release demo</li></ul>      | Create a demo of your Base Account integration, post on social (Farcaster and/or X) and tag Coinbase Wallet and/or Base|

# Universal Sign-On

Base Account is a universal sign-on for onchain apps. Users bring the same account, identity, and assets across apps.

## How it works

1. Base Account relies on [passkeys](https://passkeys.com), stored on users' devices, which can be used on our website (keys.coinbase.com) and [mobile app](https://www.coinbase.com/wallet). 
2. Our SDK, which developers integrate into their apps, uses keys.coinbase.com popups to allow users to see requests and sign with their passkey. 
3. The SDK and the popup use cross domain messaging to share information back to the app.

# Networks

The Base Account contracts can be [permissionlessly deployed](https://github.com/coinbase/smart-wallet/tree/main?tab=readme-ov-file#deployments) on any EVM-compatible network.
Our SDK and client support the following networks.

## Mainnet Networks
- Base
- Arbitrum
- Optimism
- Zora 
- Polygon 
- BNB
- Avalanche
- Lordchain
- Ethereum mainnet (not recommended due to costs)

## Testnet Networks
- Sepolia 
- Base Sepolia

# Passkeys

Passkeys enable instant account creation and seamless authentication for Base Account users, dramatically simplifying onboarding. By leveraging FIDO2-compliant authentication, passkeys eliminate seed phrases while providing enterprise-grade security for both wallet access and onchain ownership.

During account creation, a cryptographic key pair is generated and the private key is securely stored on the user's device, while the public key is registered onchain as an owner of the user's Base Account. The passkey serves two core functions:

1. **Authentication**: Replaces passwords for wallet access.
2. **Transaction Signing**: Functions as the signing key for onchain transactions, replacing private keys and seed phrases.

## Cross-Device Support

Passkeys leverage platform authenticator APIs for cross-device synchronization through:
- iCloud Keychain (Apple devices)
- Google Password Manager
- 1Password
- Any WebAuthn-compatible password manager

This enables seamless multi-device support without exposing the underlying cryptographic material.

**Account Recovery Considerations**: Without access to their passkey or a configured recovery key, users will permanently lose wallet access.

# MagicSpend

MagicSpend enables Base Account users to spend their Coinbase balances directly onchain. Users can connect their Coinbase account during the transaction flow, eliminating the need for manual onramps or transfers.

## Benefits for Your App
- Remove funding friction for new users
- Tap into Coinbase's massive user base
- Enable instant transactions without waiting for onramps

## Supported Assets and Networks
- Assets: ETH, USDC
- Networks: Base

## Best Practices
Some apps check user's onchain balance and block certain interactions if the user has insufficient funds. This is a problem for MagicSpend users, who can access their Coinbase funds during the transaction flow.

Apps can detect whether the connected address may have other funds accessible via `auxiliaryFunds` capability, which can be discovered via a [`wallet_getCapabilities` RPC call](https://eip5792.xyz/reference/getCapabilities).
If a user has `auxiliaryFunds`, apps should not block interactions based on onchain balance.

# Base Pay

Base Pay lets you accept USDC payments with a single clickâ€”no cards, no FX fees, no chargebacks.

* **Any user can pay** â€“ works with every Base Account out of the box.
* **USDC, not gas** â€“ you charge in dollars; gas sponsorship is handled automatically.
* **Fast** â€“ most payments confirm in <2 seconds on Base.
* **No extra fees** â€“ you receive the full amount.

## Usage

```typescript
import { createBaseAccountSDK, pay, getPaymentStatus } from '@base-org/account';

// Initialize SDK
const provider = createBaseAccountSDK().getProvider();

// Trigger a payment
const { id } = await pay({
  amount: '5.00',           // USD amount (we quote USDC internally)
  to:    '0xRecipient',     // your address
  testnet: true            // set false for Mainnet
});

// Poll until mined
const { status } = await getPaymentStatus({ id });
if (status === 'completed') console.log('ðŸŽ‰ payment settled');
```

# Sponsored Transactions (Paymasters)

Base Account enables apps to pay for users' transaction gas fees, allowing free transactions or removing the need for users to hold native tokens.

## Technical Details
- Sponsored transactions are facilitated onchain via [ERC-4337](https://eips.ethereum.org/EIPS/eip-4337) compliant paymasters.
- Apps must have a [ERC-7677](https://eips.ethereum.org/EIPS/eip-7677) compliant paymaster service. 
- Apps can share this paymaster to Base Account via the ERC-7677 `paymasterService` capability on a `wallet_sendCalls` request.

# Spend Permissions

Spend Permissions enable third-party signers to spend assets (native and ERC-20 tokens) from a user's Base Account. Once granted, Spend Permissions allow developers to move users' assets without any further signatures, unlocking use cases like subscriptions & trading bots. 

## Technical Details

- Spend Permissions **supports all ERC-20 assets**
- Spend Permissions **enable spending native tokens**
- Spend Permissions offers granular **controls for recurrence**, e.g. "10 USDC per week"

# Batch Transactions

Base Account supports batch transactions, which allow developers to perform multiple operations in a single transaction. This is useful for reducing the number of transactions required to perform a complex operation, such as a swap or a multi-step transaction.

## Technical Details

- Batch transactions are facilitated via the [wallet_sendCalls](https://www.eip5792.xyz/reference/sendCalls) RPC.

# ERC20 Paymasters 

Base Account enables users to pay for gas in ERC20 tokens! This enables users to use app-specific tokens as payment for gas.

## Technical Details

- We recommend the [Coinbase Developer Platform](https://www.coinbase.com/developer-platform) paymaster, as it is [fully set up to work with Base Account ERC-20 token gas payments](/base-account/improve-ux/sponsor-gas/erc20-paymasters).
- Developers pay gas for their users in ETH and choose an exchange rate at which to receive an ERC-20 token as payment. 

# Sub Accounts

Sub Accounts are hierarchical, app-specific accounts that extend from a user's primary Base Account. Each Sub Account operates as a distinct account that can:

- Execute transactions and sign messages
- Maintain separate asset management
- Be fully controlled by both the universal Base Account and authorized application logic

## Technical Details

- Base Account Ownership: The user's Base Account acts as an owner of the Sub Account, allowing it to manage assets on the Sub Account and make calls from it.
- App-Signer Agnostic: Sub Accounts are designed to be agnostic to whatever signing software an app wants to use: whether in-browser CryptoKey or server signers from teams like Privy or Turnkey.
- When an app requests a Sub Account creation and the user approves, all future signing and transaction requests will use the Sub Account.

## Sub Account scope

Sub Accounts are currently scoped to an application's fully qualified domain name (FQDN). This means that a user has one sub account for your application, and it cannot be used on other applications on separate domains.

# Signature Verification

There are important details to verifying smart contract wallet signatures. The smart contract itself cannot produce a signature. Instead, the contract has a function:

```solidity
function isValidSignature(bytes32 _hash, bytes memory _signature) returns (bytes4 magicValue);
```

which can be called to determine if signature should be considered valid (defined in [EIP-1271](https://eips.ethereum.org/EIPS/eip-1271)).

In the case of Base Account, a signature is considered valid if it was signed by a current signer (aka "owner") of the Base Account. For example, a user can sign a message with their passkey, and when `isValidSignature` is called on their Base Account, it would return that the signature is valid because their passkey is an owner.

There is also an additional complexity: users receive their Base Account address immediately upon passkey registration, and are able to begin signing for their Base Account, but their Base Account is not deployed on a chain until the first transaction on that chain.

[ERC-6492](https://eips.ethereum.org/EIPS/eip-6492) describes how to verify signatures in a way that works for both deployed and undeployed Base Accounts.

## Offchain Verification
For purely offchain signature verificationâ€“â€“such as "Sign-In With Ethereum"â€“â€“ensure you are using a ERC-6492-compliant signature verification library. We recommend Viem's [`verifyMessage`](https://viem.sh/docs/actions/public/verifyMessage#verifymessage) and [verifyTypedData](https://viem.sh/docs/actions/public/verifyTypedData).

## Onchain Verification
For signatures that will be used onchain, such as with [Permit2](https://github.com/Uniswap/permit2) or [Seaport](https://github.com/ProjectOpenSea/seaport) developers will need to inspect the signature offchain and remove unneeded ERC-6492 data, if it is present. We recommend using the [parseErc6492Signature](https://viem.sh/docs/utilities/parseErc6492Signature#parseerc6492signature) util from Viem.

# Authentication Flow

Base Account uses the "Sign in with Ethereum" (SIWE) standard for authentication:

1. **No new passwords** â€“ authentication happens with the key the user already controls.
2. **Nothing to steal or reuse** â€“ each login is a one-off, domain-bound signature that never leaves the user's device.
3. **Wallet-agnostic** â€“ works in any EIP-1193 wallet and follows the open [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) standard.

## High-level flow

1. User clicks "Sign in with Base"
2. App requests a nonce from server
3. SDK opens popup for user to approve connection with passkey
4. User approves and receives address, message, and signature
5. App verifies signature on server and creates session

# SDK Usage

## Installation

```bash
npm install @base-org/account
```

## Basic Setup

```typescript
import { createBaseAccountSDK, base } from '@base-org/account';

const sdk = createBaseAccountSDK({
  appName: 'My App Name',
  appLogoUrl: 'https://example.com/logo.png',
  appChainIds: [base.constants.CHAIN_IDS.base],
});

const provider = sdk.getProvider();
```

## Request Handling

Requests are handled in one of three ways:

1. **Sent to the Wallet Service**: Wallet popup, extension, or mobile app
2. **Handled locally by the SDK**: No external calls
3. **Passed to default RPC provider**: For the given chain

### Sent to Wallet Service

- eth_ecRecover
- personal_sign
- personal_ecRecover
- eth_signTransaction
- eth_sendTransaction
- eth_signTypedData_v1
- eth_signTypedData_v3
- eth_signTypedData_v4
- eth_signTypedData
- wallet_addEthereumChain
- wallet_watchAsset
- wallet_sendCalls
- wallet_showCallsStatus
- wallet_connect
- wallet_addSubAccount

### Handled Locally by SDK

- eth_requestAccounts
- eth_accounts
- eth_coinbase
- net_version
- eth_chainId
- wallet_getCapabilities
- wallet_switchEthereumChain

# Framework Integrations

## Next.js with Wagmi

```typescript
import { http, createConfig } from 'wagmi'
import { base, baseSepolia } from 'wagmi/chains'
import { coinbaseWallet } from 'wagmi/connectors'

const coinbaseConnector = coinbaseWallet({
  appName: 'Your App Name',
  preference: {
    options: 'smartWalletOnly' // Force Base Account usage
  }
})

export const config = createConfig({
  chains: [base, baseSepolia],
  connectors: [coinbaseConnector],
  transports: {
    [base.id]: http(),
    [baseSepolia.id]: http(),
  },
})
```

## Next.js with Privy

Base Account integrates with Privy for additional authentication and wallet management features, including automatic Sub Account creation and spend permissions.

# Migration from Coinbase Wallet SDK

The Base Account SDK is the successor to the Coinbase Wallet SDK. Developers should integrate the Base Account SDK such that users connect via a "Sign in with Base" button. 

We recommend adding the Base Account button as an additional option, next to existing "Coinbase Wallet" buttons, to allow a transition period for users to get familiar with the new Base brand.

# Troubleshooting

## Unsupported Calls

Base Account follows the [ERC-4337](https://eips.ethereum.org/EIPS/eip-4337) standard for account abstraction. Some calls are not supported:

- **Self Calls**: For security reasons, we do not allow 3rd party apps to make calls to a user's own Base Account address.
- **CREATE**: Currently, we do not support the `CREATE` opcode for smart contracts deployment. Use factory contracts or `CREATE2` instead.

## Popup Issues

When Base Account is connected and receives a request, it opens keys.coinbase.com in a popup window:

- **Default blocking behavior**: Most browsers block popups unless triggered by a click
- **Cross-Origin-Opener-Policy**: Use `same-origin-allow-popups` or `unsafe-none`
- **Popup linger behavior**: After responding to a request, popup lingers for 200ms to listen for followup requests

# Gas Usage

Base Accounts use more gas for transactions than traditional Ethereum accounts. On L2 networks, the cost difference is a matter of cents. The gas difference is due to:

1. **ERC-4337 Bundling**
2. **Smart Contract Operations** (including one-time deployment)
3. **Signature Verification**

## Gas Usage Breakdown

| Operation Type | Traditional Account | Base Account |
|---------------|------------|--------------|
| Native Token Transfer | ~21,000 gas | ~100,000 gas |
| ERC-20 Token Transfer | ~65,000 gas | ~150,000 gas |
| First Deployment | N/A | ~300,000+ gas |

# Telemetry

Base Account includes an anonymous telemetry system to help improve the developer experience. Participation is optional and can be configured during SDK initialization.

We collect:
- **Request Success Metrics**: Success and failure rates of wallet requests
- **Error Events**: Generic error events with operational context
- **UI Component Usage**: Anonymous metrics on interface functionality

**Privacy First**: No sensitive dataâ€”such as private keys, transaction contents, user addresses, or personal informationâ€”is ever collected.

# Examples and Demos

- [Coin Your Bangers](https://github.com/base/demos/tree/master/smart-wallet/coin-your-joke) - Sub Accounts demo
- [Onchain Vibes Store](https://github.com/base/demos/tree/master/smart-wallet/onchain-vibes-store) - Profiles demo
- [Sub Account MiniKit Template](https://github.com/base/demos/tree/master/smart-wallet/sub-accounts-minikit) - Integration with OnchainKit/MiniKit

# Support

Reach out to us in the `#base-account` channel on [Discord](https://discord.com/invite/buildonbase) if you have any questions.

For more detailed information, visit the complete documentation at https://docs.base.org/base-account/